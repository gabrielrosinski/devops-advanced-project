name: CI Pipeline

on:
  push:
    branches: [ phase2 ]
  workflow_dispatch:

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest

    env:
      DB_HOST: 127.0.0.1
      DB_USER: root
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_ROOT_USER: root
      DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.DB_PASSWORD }}" ]; then
            echo "Error: DB_PASSWORD secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.DB_NAME }}" ]; then
            echo "Error: DB_NAME secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.DB_ROOT_PASSWORD }}" ]; then
            echo "Error: DB_ROOT_PASSWORD secret is not set"
            exit 1
          fi
          echo "All required secrets are present"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install MySQL client for health checks
          sudo apt-get update
          sudo apt-get install -y mysql-client

      - name: Wait for MySQL
        env:
          MYSQL_PWD: ${{ secrets.DB_ROOT_PASSWORD }}
        run: |
          # Wait for MySQL to be ready using environment variable for password
          for i in {1..30}; do
            if mysqladmin ping --host=127.0.0.1 --user=root --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... (attempt $i/30)"
            sleep 2
          done

      - name: Initialize database
        run: |
          if [ ! -f setup_test_db.py ]; then
            echo "Error: setup_test_db.py not found"
            exit 1
          fi
          python setup_test_db.py

      - name: Start Rest server
        env:
          HOST: 127.0.0.1
        run: |
          # Run your app in the background
          nohup python rest_app.py > server.log 2>&1 &

      - name: Wait for REST API to be ready
        run: |
          # Wait for API to respond
          for i in {1..30}; do
            if curl -f http://127.0.0.1:5000/users > /dev/null 2>&1; then
              echo "REST API is ready!"
              break
            fi
            echo "Waiting for REST API... (attempt $i/30)"
            sleep 2
          done
          if ! curl -f http://127.0.0.1:5000 > /dev/null 2>&1; then
            echo "Rest App failed to start after 60 seconds"
            exit 1
          fi

      - name: Start Web App
        env:
          HOST: 127.0.0.1
        run: |
          # Run your app in the background
          nohup python web_app.py > web.log 2>&1 &

      - name: Wait for Web App to be ready
        run: |
          # Wait for web app to respond
          for i in {1..30}; do
            if curl -f http://127.0.0.1:5001 > /dev/null 2>&1; then
              echo "Web App is ready!"
              break
            fi
            echo "Waiting for Web App... (attempt $i/30)"
            sleep 2
          done
          if ! curl -f http://127.0.0.1:5001 > /dev/null 2>&1; then
            echo "Web App failed to start after 60 seconds"
            exit 1
          fi

      - name: Run Backend Tests
        run: |
          if [ ! -f backend_testing.py ]; then
            echo "Error: backend_testing.py not found"
            exit 1
          fi
          python backend_testing.py

      - name: Run web tests
        run: |
          if [ ! -f frontend_testing.py ]; then
            echo "Error: frontend_testing.py not found"
            exit 1
          fi
          python frontend_testing.py

      - name: Run Combined Tests
        run: |
          if [ ! -f combined_testing.py ]; then
            echo "Error: combined_testing.py not found"
            exit 1
          fi
          python combined_testing.py

      - name: Cleanup Environment
        if: always()
        run: |
          if [ -f clean_environment.py ]; then
            python clean_environment.py
          else
            echo "Warning: clean_environment.py not found, skipping cleanup"
          fi

      - name: Show Logs on Failure
        if: failure()
        run: |
          echo "=== REST API Logs ==="
          cat server.log 2>/dev/null || echo "No server log found"
          echo ""
          echo "=== Web App Logs ==="
          cat web.log 2>/dev/null || echo "No web log found"

